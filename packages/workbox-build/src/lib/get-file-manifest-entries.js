const assert = require('assert');
const path = require('path');

const errors = require('./errors');
const filterFiles = require('./utils/filter-files');
const getCompositeDetails = require('./utils/get-composite-details');
const getFileDetails = require('./utils/get-file-details');
const getStringDetails = require('./utils/get-string-details');

/**
 * @typedef {Object} ManifestEntry
 * @property {String} url The URL to the asset in the manifest.
 * @property {String} revision The revision details for the file. This is a
 * hash generated by node based on the file contents.
 * @memberof module:workbox-build
 */

module.exports = async ({
  dontCacheBustUrlsMatching,
  globDirectory,
  globIgnores,
  globPatterns,
  manifestTransforms,
  maximumFileSizeToCacheInBytes,
  modifyUrlPrefix,
  swDest,
  templatedUrls,
}) => {
  if (!globDirectory) {
    return [];
  }

  const fileSet = new Set();

  if (swDest) {
    // Ensure that we ignore the SW file we're eventually writing to disk.
    globIgnores.push(`**/${path.basename(swDest)}`);
  }

  const fileDetails = globPatterns.reduce((accumulated, globPattern) => {
    const globbedFileDetails = getFileDetails({
      globDirectory,
      globPattern,
      globIgnores,
    });

    globbedFileDetails.forEach((fileDetails) => {
      if (fileSet.has(fileDetails.file)) {
        return;
      }

      fileSet.add(fileDetails.file);
      accumulated.push(fileDetails);
    });
    return accumulated;
  }, []);

  if (templatedUrls) {
    for (let url of Object.keys(templatedUrls)) {
      assert(!fileSet.has(url), errors['templated-url-matches-glob']);

      const dependencies = templatedUrls[url];
      if (Array.isArray(dependencies)) {
        const dependencyDetails = dependencies.reduce((previous, pattern) => {
          try {
            const globbedFileDetails = getFileDetails(
              globDirectory, pattern, globIgnores);
            return previous.concat(globbedFileDetails);
          } catch (err) {
            const debugObj = {};
            debugObj[url] = dependencies;
            throw new Error(`${errors['bad-template-urls-asset']} ` +
              `'${pattern}' in templateUrl '${JSON.stringify(debugObj)}' ` +
              `could not be found.`);
          }
        }, []);
        fileDetails.push(getCompositeDetails(url, dependencyDetails));
      } else if (typeof dependencies === 'string') {
        fileDetails.push(getStringDetails(url, dependencies));
      }
    }
  }

  return filterFiles({fileDetails, maximumFileSizeToCacheInBytes,
    modifyUrlPrefix, dontCacheBustUrlsMatching, manifestTransforms});
};
